/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(2);

var _reactDom2 = _interopRequireDefault(_reactDom);

var _editor = __webpack_require__(3);

var _editor2 = _interopRequireDefault(_editor);

var _fs = __webpack_require__(6);

var _fs2 = _interopRequireDefault(_fs);

var _electron = __webpack_require__(7);

var _dispatcher = __webpack_require__(8);

var _dispatcher2 = _interopRequireDefault(_dispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dialog = _electron.remote.dialog,
    Menu = _electron.remote.Menu,
    MenuItem = _electron.remote.MenuItem;


var template = [{
  label: 'File',
  submenu: [{ label: 'new file', click: function click() {
      _dispatcher2.default.dispatch({
        type: "NEW_FILE"
      });
    }
  }, { label: 'open file', click: function click() {
      dialog.showOpenDialog({ properties: ['openFile'], filters: [{ name: 'All Files', extensions: ['md'] }] }, function (filePath) {
        _dispatcher2.default.dispatch({
          type: "OPEN_FILE",
          'filePath': filePath.toString()
        });
      });
    }
  },
  // {label: 'save', click () {
  //   dispatcher.dispatch({
  //     type: "SAVE_FILE",
  //   });

  //     } },
  { label: 'save as', click: function click() {
      dialog.showSaveDialog({ properties: ['saveFileAs'], filters: [{ name: 'All Files', extensions: ['md'] }] }, function (filePath) {
        _dispatcher2.default.dispatch({
          type: "SAVE_FILE_AS",
          'filePath': filePath.toString()
        });
      });
    }
  }]
}, {
  label: 'Edit',
  submenu: [{ role: 'undo' }, { role: 'redo' }, { type: 'separator' }, { role: 'cut' }, { role: 'copy' }, { role: 'paste' }, { role: 'pasteandmatchstyle' }, { role: 'delete' }, { role: 'selectall' }]
}, {
  label: 'View',
  submenu: [{ role: 'reload' }, { role: 'forcereload' }, { role: 'toggledevtools' }, { type: 'separator' }, { role: 'resetzoom' }, { role: 'zoomin' }, { role: 'zoomout' }, { type: 'separator' }, { role: 'togglefullscreen' }]
}, {
  role: 'window',
  submenu: [{ role: 'minimize' }, { role: 'close' }]
}, {
  role: 'help',
  submenu: [{
    label: 'Learn More',
    click: function click() {
      __webpack_require__(7).shell.openExternal('https://electron.atom.io');
    }
  }]
}];
var menu = Menu.buildFromTemplate(template);
Menu.setApplicationMenu(menu);

// const menu = new Menu()
// menu.append(new MenuItem({label: 'MenuItem1', click() { console.log('item 1 clicked') }}))
// menu.append(new MenuItem({type: 'separator'}))
// menu.append(new MenuItem({label: 'MenuItem2', type: 'checkbox', checked: true}))

// window.addEventListener('contextmenu', (e) => {
//   e.preventDefault()
//   menu.popup(remote.getCurrentWindow())
// }, false)


// const filePath = dialog.showOpenDialog({properties: ['openFile'],filters:[{name: 'All Files', extensions: ['md']}]})

// dispatcher.dispatch({
//   type: "OPEN_FILE",
//   'filePath':filePath.toString(),
// });

// const source = fs.readFileSync(filePath.toString(),'utf8')


//console.log(dialog)

var source = '';

var app = document.querySelector('#app');
console.log('must work this or');

_reactDom2.default.render(_react2.default.createElement(_editor2.default, { source: source }), app);

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("react-dom");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slate = __webpack_require__(4);

var _prismjs = __webpack_require__(5);

var _prismjs2 = _interopRequireDefault(_prismjs);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _store = __webpack_require__(9);

var _store2 = _interopRequireDefault(_store);

var _dispatcher = __webpack_require__(8);

var _dispatcher2 = _interopRequireDefault(_dispatcher);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Add the markdown syntax to Prism.
 */

// eslint-disable-next-line
_prismjs2.default.languages.markdown = _prismjs2.default.languages.extend("markup", {}), _prismjs2.default.languages.insertBefore("markdown", "prolog", { blockquote: { pattern: /^>(?:[\t ]*>)*/m, alias: "punctuation" }, code: [{ pattern: /^(?: {4}|\t).+/m, alias: "keyword" }, { pattern: /``.+?``|`[^`\n]+`/, alias: "keyword" }], title: [{ pattern: /\w+.*(?:\r?\n|\r)(?:==+|--+)/, alias: "important", inside: { punctuation: /==+$|--+$/ } }, { pattern: /(^\s*)#+.+/m, lookbehind: !0, alias: "important", inside: { punctuation: /^#+|#+$/ } }], hr: { pattern: /(^\s*)([*-])([\t ]*\2){2,}(?=\s*$)/m, lookbehind: !0, alias: "punctuation" }, list: { pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m, lookbehind: !0, alias: "punctuation" }, "url-reference": { pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/, inside: { variable: { pattern: /^(!?\[)[^\]]+/, lookbehind: !0 }, string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/, punctuation: /^[\[\]!:]|[<>]/ }, alias: "url" }, bold: { pattern: /(^|[^\\])(\*\*|__)(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^\*\*|^__|\*\*$|__$/ } }, italic: { pattern: /(^|[^\\])([*_])(?:(?:\r?\n|\r)(?!\r?\n|\r)|.)+?\2/, lookbehind: !0, inside: { punctuation: /^[*_]|[*_]$/ } }, url: { pattern: /!?\[[^\]]+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)| ?\[[^\]\n]*\])/, inside: { variable: { pattern: /(!?\[)[^\]]+(?=\]$)/, lookbehind: !0 }, string: { pattern: /"(?:\\.|[^"\\])*"(?=\)$)/ } } } }), _prismjs2.default.languages.markdown.bold.inside.url = _prismjs2.default.util.clone(_prismjs2.default.languages.markdown.url), _prismjs2.default.languages.markdown.italic.inside.url = _prismjs2.default.util.clone(_prismjs2.default.languages.markdown.url), _prismjs2.default.languages.markdown.bold.inside.italic = _prismjs2.default.util.clone(_prismjs2.default.languages.markdown.italic), _prismjs2.default.languages.markdown.italic.inside.bold = _prismjs2.default.util.clone(_prismjs2.default.languages.markdown.bold);

/**
 * Define a decorator for markdown styles.
 *
 * @param {Text} text
 * @param {Block} block
 */

function markdownDecorator(text, block) {
  var characters = text.characters.asMutable();
  var language = 'markdown';
  var string = text.text;
  var grammar = _prismjs2.default.languages[language];
  var tokens = _prismjs2.default.tokenize(string, grammar);
  addMarks(characters, tokens, 0);
  return characters.asImmutable();
}

function codeH(text, block) {
  console.log('text', text);
  console.log('block', block);
  var characters = text.characters.asMutable();
  return characters.asImmutable();
}

function CodeBlock(props) {
  console.log('block');
  var editor = props.editor,
      node = props.node;

  var language = 'javascript';

  function onChange(e) {
    var state = editor.getState();
    var next = state.transform().setNodeByKey(node.key, {
      data: {
        language: e.target.value
      }
    }).apply();
    editor.onChange(next);
  }
}

function addMarks(characters, tokens, offset) {
  // console.log('char',characters)
  // console.log('token',tokens)
  // console.log('offset',offset)
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var token = _step.value;

      if (typeof token == 'string') {
        offset += token.length;
        continue;
      }

      var content = token.content,
          length = token.length,
          type = token.type;

      var mark = _slate.Mark.create({ type: type });

      for (var i = offset; i < offset + length; i++) {
        var char = characters.get(i);
        var _char = char,
            marks = _char.marks;

        marks = marks.add(mark);
        char = char.set('marks', marks);
        characters.set(i, char);
      }

      if (Array.isArray(content)) {
        addMarks(characters, content, offset);
      }

      offset += length;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * Define a schema.
 *
 * @type {Object}
 */

var schema = {
  nodes: {},

  marks: {
    'title': {
      fontWeight: 'bold',
      fontSize: '18px',
      margin: '0 0 8px 0',
      display: 'inline-block',
      color: "#569CD6"
    },
    'bold': {
      fontWeight: 'bold',
      color: "#569CD6"
    },
    'italic': {
      fontStyle: 'italic'
    },
    'punctuation': {
      opacity: 0.6
    },
    'code': {
      fontFamily: 'monospace',
      display: 'inline-block',
      padding: '2px 1px',
      color: '#CE915E',
      direction: 'ltr'
    },
    'list': {
      paddingLeft: '5px',
      lineHeight: '16px',
      color: "#569CD6"
    },
    'hr': {

      display: 'block',
      opacity: 0.5
    }
  },
  rules: [{
    match: function match() {
      return true;
    },
    decorate: markdownDecorator

  }]

  /**
   * The markdown preview example.
   *
   * @type {Component}
   */

};
var MarkdownPreview = function (_React$Component) {
  _inherits(MarkdownPreview, _React$Component);

  /**
   * Deserialize the initial editor state.
   *
   * @type {Object}
   */
  function MarkdownPreview() {
    _classCallCheck(this, MarkdownPreview);

    var _this = _possibleConstructorReturn(this, (MarkdownPreview.__proto__ || Object.getPrototypeOf(MarkdownPreview)).call(this));

    _this.style = {
      backgroundColor: '#1E1E1E',
      color: '#D4D4D4'

      /**
       *
       * Render the example.
       *
       * @return {Component} component
       */

    };

    _this.onChange = function (state) {
      //this.setState({ state })
      _dispatcher2.default.dispatch({
        type: "UPDATE_CONTENT",
        state: state
      });
    };

    _this.state = { state: _store2.default.getContent() };
    return _this;
  }

  _createClass(MarkdownPreview, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      _store2.default.on("content update", function (state) {
        _this2.setState({ state: state });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: this.style },
        _react2.default.createElement(
          'p',
          { style: { textAlign: 'center' } },
          _store2.default.fileName
        ),
        _react2.default.createElement(_slate.Editor, {
          schema: schema,
          state: this.state.state,
          onChange: this.onChange.bind(this)
        })
      );
    }

    /**
     * On change.
     *
     * @param {State} state
     */

  }]);

  return MarkdownPreview;
}(_react2.default.Component);

/**
 * Export.
 */

exports.default = MarkdownPreview;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("slate");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("prismjs");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("electron");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _require = __webpack_require__(10),
    Dispatcher = _require.Dispatcher;

module.exports = new Dispatcher();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = __webpack_require__(13);

var _dispatcher = __webpack_require__(8);

var _dispatcher2 = _interopRequireDefault(_dispatcher);

var _slate = __webpack_require__(4);

var _fs = __webpack_require__(6);

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DocStore = function (_EventEmitter) {
  _inherits(DocStore, _EventEmitter);

  function DocStore() {
    _classCallCheck(this, DocStore);

    var _this = _possibleConstructorReturn(this, (DocStore.__proto__ || Object.getPrototypeOf(DocStore)).call(this));

    _this.content = _slate.Plain.deserialize("");
    _this.fileName = 'undifien';
    _this.filePath = undefined;
    return _this;
  }

  _createClass(DocStore, [{
    key: 'getContent',
    value: function getContent() {
      return this.content;
    }
  }, {
    key: 'updateContent',
    value: function updateContent(text) {
      this.content = text;
      this.saveFile();
      this.emit('content update', this.content);
    }
  }, {
    key: 'changeFile',
    value: function changeFile(filePath) {
      console.log('file', filePath);
      var file = _fs2.default.readFileSync(filePath, 'utf8');
      this.content = _slate.Plain.deserialize(file);
      this.filePath = filePath;
      var p = this.filePath.split('/');
      this.fileName = p[p.length - 1];
      this.emit('content update', this.content);
    }
  }, {
    key: 'saveFile',
    value: function saveFile() {
      if (this.filePath) {
        var fileSource = _slate.Plain.serialize(this.content);
        _fs2.default.writeFileSync(this.filePath, fileSource, 'utf8');
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.content = _slate.Plain.deserialize("");
      this.fileName = 'undifien';
      this.filePath = undefined;
      this.emit('content update', this.content);
    }
  }, {
    key: 'saveNewFile',
    value: function saveNewFile(filePath) {
      this.fileName = filePath;
      var p = this.filePath.split('/');
      this.fileName = p[p.length - 1];
      var fileSource = _slate.Plain.serialize(this.content);
      _fs2.default.writeFileSync(filePath, fileSource, 'utf8');
      // console.log('save',this.content.texts)
    }
  }, {
    key: 'handleActions',
    value: function handleActions(action) {

      switch (action.type) {
        case "UPDATE_CONTENT":
          {
            this.updateContent(action.state);
            break;
          }
        case "OPEN_FILE":
          {
            this.changeFile(action.filePath);
            break;
          }
        case "NEW_FILE":
          {
            this.reset();
            break;
          }
        case "SAVE_FILE_AS":
          {
            this.saveNewFile(action.filePath);
            break;
          }
      }
    }
  }]);

  return DocStore;
}(_events.EventEmitter);

var docStore = new DocStore();
_dispatcher2.default.register(docStore.handleActions.bind(docStore));

exports.default = docStore;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

module.exports.Dispatcher = __webpack_require__(11);


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Dispatcher
 * 
 * @preventMunge
 */



exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var invariant = __webpack_require__(12);

var _prefix = 'ID_';

/**
 * Dispatcher is used to broadcast payloads to registered callbacks. This is
 * different from generic pub-sub systems in two ways:
 *
 *   1) Callbacks are not subscribed to particular events. Every payload is
 *      dispatched to every registered callback.
 *   2) Callbacks can be deferred in whole or part until other callbacks have
 *      been executed.
 *
 * For example, consider this hypothetical flight destination form, which
 * selects a default city when a country is selected:
 *
 *   var flightDispatcher = new Dispatcher();
 *
 *   // Keeps track of which country is selected
 *   var CountryStore = {country: null};
 *
 *   // Keeps track of which city is selected
 *   var CityStore = {city: null};
 *
 *   // Keeps track of the base flight price of the selected city
 *   var FlightPriceStore = {price: null}
 *
 * When a user changes the selected city, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'city-update',
 *     selectedCity: 'paris'
 *   });
 *
 * This payload is digested by `CityStore`:
 *
 *   flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'city-update') {
 *       CityStore.city = payload.selectedCity;
 *     }
 *   });
 *
 * When the user selects a country, we dispatch the payload:
 *
 *   flightDispatcher.dispatch({
 *     actionType: 'country-update',
 *     selectedCountry: 'australia'
 *   });
 *
 * This payload is digested by both stores:
 *
 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       CountryStore.country = payload.selectedCountry;
 *     }
 *   });
 *
 * When the callback to update `CountryStore` is registered, we save a reference
 * to the returned token. Using this token with `waitFor()`, we can guarantee
 * that `CountryStore` is updated before the callback that updates `CityStore`
 * needs to query its data.
 *
 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
 *     if (payload.actionType === 'country-update') {
 *       // `CountryStore.country` may not be updated.
 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
 *       // `CountryStore.country` is now guaranteed to be updated.
 *
 *       // Select the default city for the new country
 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
 *     }
 *   });
 *
 * The usage of `waitFor()` can be chained, for example:
 *
 *   FlightPriceStore.dispatchToken =
 *     flightDispatcher.register(function(payload) {
 *       switch (payload.actionType) {
 *         case 'country-update':
 *         case 'city-update':
 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
 *           FlightPriceStore.price =
 *             getFlightPriceStore(CountryStore.country, CityStore.city);
 *           break;
 *     }
 *   });
 *
 * The `country-update` payload will be guaranteed to invoke the stores'
 * registered callbacks in order: `CountryStore`, `CityStore`, then
 * `FlightPriceStore`.
 */

var Dispatcher = (function () {
  function Dispatcher() {
    _classCallCheck(this, Dispatcher);

    this._callbacks = {};
    this._isDispatching = false;
    this._isHandled = {};
    this._isPending = {};
    this._lastID = 1;
  }

  /**
   * Registers a callback to be invoked with every dispatched payload. Returns
   * a token that can be used with `waitFor()`.
   */

  Dispatcher.prototype.register = function register(callback) {
    var id = _prefix + this._lastID++;
    this._callbacks[id] = callback;
    return id;
  };

  /**
   * Removes a callback based on its token.
   */

  Dispatcher.prototype.unregister = function unregister(id) {
    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
    delete this._callbacks[id];
  };

  /**
   * Waits for the callbacks specified to be invoked before continuing execution
   * of the current callback. This method should only be used by a callback in
   * response to a dispatched payload.
   */

  Dispatcher.prototype.waitFor = function waitFor(ids) {
    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
    for (var ii = 0; ii < ids.length; ii++) {
      var id = ids[ii];
      if (this._isPending[id]) {
        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
        continue;
      }
      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
      this._invokeCallback(id);
    }
  };

  /**
   * Dispatches a payload to all registered callbacks.
   */

  Dispatcher.prototype.dispatch = function dispatch(payload) {
    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
    this._startDispatching(payload);
    try {
      for (var id in this._callbacks) {
        if (this._isPending[id]) {
          continue;
        }
        this._invokeCallback(id);
      }
    } finally {
      this._stopDispatching();
    }
  };

  /**
   * Is this Dispatcher currently dispatching.
   */

  Dispatcher.prototype.isDispatching = function isDispatching() {
    return this._isDispatching;
  };

  /**
   * Call the callback stored with the given id. Also do some internal
   * bookkeeping.
   *
   * @internal
   */

  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
    this._isPending[id] = true;
    this._callbacks[id](this._pendingPayload);
    this._isHandled[id] = true;
  };

  /**
   * Set up bookkeeping needed when dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
    for (var id in this._callbacks) {
      this._isPending[id] = false;
      this._isHandled[id] = false;
    }
    this._pendingPayload = payload;
    this._isDispatching = true;
  };

  /**
   * Clear bookkeeping used for dispatching.
   *
   * @internal
   */

  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
    delete this._pendingPayload;
    this._isDispatching = false;
  };

  return Dispatcher;
})();

module.exports = Dispatcher;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,